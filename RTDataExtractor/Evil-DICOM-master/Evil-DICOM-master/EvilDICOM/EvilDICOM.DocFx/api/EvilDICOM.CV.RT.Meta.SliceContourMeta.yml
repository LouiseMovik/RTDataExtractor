### YamlMime:ManagedReference
items:
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
  commentId: T:EvilDICOM.CV.RT.Meta.SliceContourMeta
  id: SliceContourMeta
  parent: EvilDICOM.CV.RT.Meta
  children:
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint(OpenCvSharp.Point3f)
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains(EvilDICOM.CV.RT.Meta.SliceContourMeta)
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice(Mat,Mat,System.Double)
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage(Mat,Vec2f[],System.Byte)
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast(Mat,Mat,System.Byte,System.Double)
  - EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
  langs:
  - csharp
  - vb
  name: SliceContourMeta
  nameWithType: SliceContourMeta
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
  type: Class
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: SliceContourMeta
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 15
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  summary: "\nRepresents a closed contour on a given slice \n(can be multiple for the same stucture on the same slice)\n"
  example: []
  syntax:
    content: 'public class SliceContourMeta : object'
    content.vb: >-
      Public Class SliceContourMeta
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint(OpenCvSharp.Point3f)
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint(OpenCvSharp.Point3f)
  id: AddPoint(OpenCvSharp.Point3f)
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: AddPoint(OpenCvSharp.Point3f)
  nameWithType: SliceContourMeta.AddPoint(OpenCvSharp.Point3f)
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint(OpenCvSharp.Point3f)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: AddPoint
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 17
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public void AddPoint(OpenCvSharp.Point3f pt)
    parameters:
    - id: pt
      type: OpenCvSharp.Point3f
    content.vb: Public Sub AddPoint(pt As OpenCvSharp.Point3f)
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains(EvilDICOM.CV.RT.Meta.SliceContourMeta)
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains(EvilDICOM.CV.RT.Meta.SliceContourMeta)
  id: CompletelyContains(EvilDICOM.CV.RT.Meta.SliceContourMeta)
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: CompletelyContains(SliceContourMeta)
  nameWithType: SliceContourMeta.CompletelyContains(SliceContourMeta)
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains(EvilDICOM.CV.RT.Meta.SliceContourMeta)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: CompletelyContains
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 26
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public bool CompletelyContains(SliceContourMeta smaller)
    parameters:
    - id: smaller
      type: EvilDICOM.CV.RT.Meta.SliceContourMeta
    return:
      type: System.Boolean
    content.vb: Public Function CompletelyContains(smaller As SliceContourMeta) As Boolean
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
  commentId: P:EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
  id: ContourPoints
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: ContourPoints
  nameWithType: SliceContourMeta.ContourPoints
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: ContourPoints
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 34
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public List<OpenCvSharp.Point2f> ContourPoints { get; }
    parameters: []
    return:
      type: List{OpenCvSharp.Point2f}
    content.vb: Public ReadOnly Property ContourPoints As List(Of OpenCvSharp.Point2f)
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
  commentId: P:EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
  id: Z
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: SliceContourMeta.Z
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: Z
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 35
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public float Z { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property Z As Single
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.Z*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea
  id: CalculateArea
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: CalculateArea()
  nameWithType: SliceContourMeta.CalculateArea()
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea()
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: CalculateArea
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 37
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public double CalculateArea()
    return:
      type: System.Double
    content.vb: Public Function CalculateArea As Double
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
  commentId: P:EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
  id: Children
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: SliceContourMeta.Children
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
  type: Property
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: Children
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 54
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  summary: "\nA container for contours within this contour\n"
  example: []
  syntax:
    content: public List<SliceContourMeta> Children { get; set; }
    parameters: []
    return:
      type: List{EvilDICOM.CV.RT.Meta.SliceContourMeta}
    content.vb: Public Property Children As List(Of SliceContourMeta)
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.Children*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice(Mat,Mat,System.Double)
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice(Mat,Mat,System.Double)
  id: DrawOnSlice(Mat,Mat,System.Double)
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: DrawOnSlice(Mat, Mat, Double)
  nameWithType: SliceContourMeta.DrawOnSlice(Mat, Mat, Double)
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice(Mat, Mat, System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: DrawOnSlice
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 56
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  syntax:
    content: public Mat DrawOnSlice(Mat txMatrix, Mat slice, double scale = null)
    parameters:
    - id: txMatrix
      type: Mat
    - id: slice
      type: Mat
    - id: scale
      type: System.Double
    return:
      type: Mat
    content.vb: Public Function DrawOnSlice(txMatrix As Mat, slice As Mat, scale As Double = Nothing) As Mat
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast(Mat,Mat,System.Byte,System.Double)
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast(Mat,Mat,System.Byte,System.Double)
  id: MaskImageFast(Mat,Mat,System.Byte,System.Double)
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: MaskImageFast(Mat, Mat, Byte, Double)
  nameWithType: SliceContourMeta.MaskImageFast(Mat, Mat, Byte, Double)
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast(Mat, Mat, System.Byte, System.Double)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: MaskImageFast
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 85
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  summary: "\nMasks an image of the same voxel count as the input doseGrid. Voxels inside the\ncontour are filled with the specified color. Intent is white (0x255) on inside and outside\nareas/holes are left black (0x00)\n"
  example: []
  syntax:
    content: public void MaskImageFast(Mat mask, Mat txMatrix, byte color = null, double scale = null)
    parameters:
    - id: mask
      type: Mat
      description: the mask to fill or modify (recursively)
    - id: txMatrix
      type: Mat
      description: the patient transform matrix from the imagematrix/dosematrix
    - id: color
      type: System.Byte
      description: the color to fill the contour
    - id: scale
      type: System.Double
      description: the scale of the image (in case the image has been resampled)
    content.vb: Public Sub MaskImageFast(mask As Mat, txMatrix As Mat, color As Byte = Nothing, scale As Double = Nothing)
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage(Mat,Vec2f[],System.Byte)
  commentId: M:EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage(Mat,Vec2f[],System.Byte)
  id: MaskImage(Mat,Vec2f[],System.Byte)
  parent: EvilDICOM.CV.RT.Meta.SliceContourMeta
  langs:
  - csharp
  - vb
  name: MaskImage(Mat, Vec2f[], Byte)
  nameWithType: SliceContourMeta.MaskImage(Mat, Vec2f[], Byte)
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage(Mat, Vec2f[], System.Byte)
  type: Method
  source:
    remote:
      path: EvilDICOM/EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
      branch: master
      repo: https://github.com/rexcardan/Evil-DICOM
    id: MaskImage
    path: ../EvilDICOM.CV/RT/Meta/SliceContourMeta.cs
    startLine: 119
  assemblies:
  - EvilDICOM.CV
  namespace: EvilDICOM.CV.RT.Meta
  summary: "\nMasks an image of the same voxel count as the input doseGrid. Voxels inside the\ncontour are filled with the specified color. Intent is white (0x255) on inside and outside\nareas/holes are left black (0x00)\n"
  example: []
  syntax:
    content: public void MaskImage(Mat mask, Vec2f[] doseGridPts, byte color = null)
    parameters:
    - id: mask
      type: Mat
      description: the mask to fill or modify (recursively)
    - id: doseGridPts
      type: Vec2f[]
      description: the 2d (x,y) patient coordinates of the dose matrix slices
    - id: color
      type: System.Byte
      description: the color to fill the contour
    content.vb: Public Sub MaskImage(mask As Mat, doseGridPts As Vec2f(), color As Byte = Nothing)
  overload: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage*
  nameWithType.vb: SliceContourMeta.MaskImage(Mat, Vec2f(), Byte)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage(Mat, Vec2f(), System.Byte)
  name.vb: MaskImage(Mat, Vec2f(), Byte)
references:
- uid: EvilDICOM.CV.RT.Meta
  commentId: N:EvilDICOM.CV.RT.Meta
  name: EvilDICOM.CV.RT.Meta
  nameWithType: EvilDICOM.CV.RT.Meta
  fullName: EvilDICOM.CV.RT.Meta
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint
  name: AddPoint
  nameWithType: SliceContourMeta.AddPoint
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.AddPoint
- uid: OpenCvSharp.Point3f
  commentId: '!:OpenCvSharp.Point3f'
  isExternal: true
  name: OpenCvSharp.Point3f
  nameWithType: OpenCvSharp.Point3f
  fullName: OpenCvSharp.Point3f
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains
  name: CompletelyContains
  nameWithType: SliceContourMeta.CompletelyContains
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.CompletelyContains
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
  commentId: T:EvilDICOM.CV.RT.Meta.SliceContourMeta
  parent: EvilDICOM.CV.RT.Meta
  name: SliceContourMeta
  nameWithType: SliceContourMeta
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
  name: ContourPoints
  nameWithType: SliceContourMeta.ContourPoints
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.ContourPoints
- uid: List{OpenCvSharp.Point2f}
  commentId: '!:List{OpenCvSharp.Point2f}'
  definition: List`1
  name: List<OpenCvSharp.Point2f>
  nameWithType: List<OpenCvSharp.Point2f>
  fullName: List<OpenCvSharp.Point2f>
  nameWithType.vb: List(Of OpenCvSharp.Point2f)
  fullName.vb: List(Of OpenCvSharp.Point2f)
  name.vb: List(Of OpenCvSharp.Point2f)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OpenCvSharp.Point2f
    name: OpenCvSharp.Point2f
    nameWithType: OpenCvSharp.Point2f
    fullName: OpenCvSharp.Point2f
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OpenCvSharp.Point2f
    name: OpenCvSharp.Point2f
    nameWithType: OpenCvSharp.Point2f
    fullName: OpenCvSharp.Point2f
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.Z*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
  name: Z
  nameWithType: SliceContourMeta.Z
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.Z
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea
  name: CalculateArea
  nameWithType: SliceContourMeta.CalculateArea
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.CalculateArea
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.Children*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
  name: Children
  nameWithType: SliceContourMeta.Children
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.Children
- uid: List{EvilDICOM.CV.RT.Meta.SliceContourMeta}
  commentId: '!:List{EvilDICOM.CV.RT.Meta.SliceContourMeta}'
  definition: List`1
  name: List<SliceContourMeta>
  nameWithType: List<SliceContourMeta>
  fullName: List<EvilDICOM.CV.RT.Meta.SliceContourMeta>
  nameWithType.vb: List(Of SliceContourMeta)
  fullName.vb: List(Of EvilDICOM.CV.RT.Meta.SliceContourMeta)
  name.vb: List(Of SliceContourMeta)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
    name: SliceContourMeta
    nameWithType: SliceContourMeta
    fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: EvilDICOM.CV.RT.Meta.SliceContourMeta
    name: SliceContourMeta
    nameWithType: SliceContourMeta
    fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta
  - name: )
    nameWithType: )
    fullName: )
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice
  name: DrawOnSlice
  nameWithType: SliceContourMeta.DrawOnSlice
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.DrawOnSlice
- uid: Mat
  isExternal: true
  name: Mat
  nameWithType: Mat
  fullName: Mat
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast
  name: MaskImageFast
  nameWithType: SliceContourMeta.MaskImageFast
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImageFast
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage*
  commentId: Overload:EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage
  name: MaskImage
  nameWithType: SliceContourMeta.MaskImage
  fullName: EvilDICOM.CV.RT.Meta.SliceContourMeta.MaskImage
- uid: Vec2f[]
  isExternal: true
  name: Vec2f[]
  nameWithType: Vec2f[]
  fullName: Vec2f[]
  nameWithType.vb: Vec2f()
  fullName.vb: Vec2f()
  name.vb: Vec2f()
  spec.csharp:
  - uid: Vec2f
    name: Vec2f
    nameWithType: Vec2f
    fullName: Vec2f
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Vec2f
    name: Vec2f
    nameWithType: Vec2f
    fullName: Vec2f
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
